;;; Exercise 2.33

;test data
(define l1 (list 9 8 7 6 5 4 3 2 1))
(define l2 (list 1 4 6 2 5 8 9 6 23 7 33 3 8 45 7 3 12 56 90 65 34 21))
(define l3 (list 1 2))
(define l4 (list 3 4))

(define (inc x) (+ x 1))

(define nil (list))

(define (map proc items)
  (if (null? items)
      nil
      (cons (proc (car items))
            (map proc (cdr items)))))

(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

;procedures

(define (length-helper x y)   ;this normalizes first arg, and adds to second
  (+ (/ x x)
     y))

(define (append-helper x y)
  (cons x
        (list y)))



(define (map p sequence)        ;yahhh baby this works
  (accumulate (lambda (x y)
                (cons (p x)
                      y))
              nil
              sequence))

(define (append seq1 seq2)
  (accumulate cons nil (cons seq1 seq2)))

(define (length sequence)                 ;works
  (accumulate length-helper 0 sequence))




(append l3 l4)




(square 3)

l3  ;(1 2)
l4  ;(3 4)
(map square l3)

(cons l3 nil)
(cons 4 nil)    ;(4)
(cons 1
      (cons 2 nil))   ;(1 2)

(cons l3 l4)         ; ((1 2) 3 4)
(car (cons l3 l4))   ; (1 2)
(pair? (car l1))
(length-helper 8 1)
(append l3 l4)

(cons l3 (list l4))


(cons (list 2) 2)   ;((2) . 2)
(cons 2 (list 2))   ;(2 2)

(length l1)

(cons l3 l4)     ;((1 2) 3 4)



